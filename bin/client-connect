#!/usr/bin/php
<?php
/**
 * Copyright 2016 FranÃ§ois Kooman <fkooman@tuxed.net>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
require_once dirname(__DIR__).'/vendor/autoload.php';

use fkooman\Config\Reader;
use fkooman\Config\YamlFile;
use fkooman\VPN\Server\Pools;
use fkooman\VPN\Server\Disable;

openlog(
    basename($argv[0]),
    LOG_PERROR,
    LOG_USER
);

try {
    $envData = [];
    $envKeys = [
        'common_name',
        'time_unix',
        'ifconfig_pool_remote_ip',
        'ifconfig_pool_remote_ip6',
        'POOL_ID',
    ];

    // read environment variables
    foreach ($envKeys as $envKey) {
        $envValue = getenv($envKey);
        if (empty($envValue)) {
            throw new RuntimeException(sprintf('environment variable "%s" is not set', $envKey));
        }
        $envData[$envKey] = $envValue;
    }

    $commonName = $envData['common_name'];
    $userId = substr($commonName, 0, strpos($commonName, '_'));

    $configReader = new Reader(
        new YamlFile(dirname(__DIR__).'/config/config.yaml')
    );
    $dataDir = $configReader->v('dataDir');

    // read configuration
    $poolsConfig = new Reader(
        new YamlFile(dirname(__DIR__).'/config/pools.yaml')
    );

    $aclConfig = new Reader(
        new YamlFile(dirname(__DIR__).'/config/acl.yaml')
    );

    // user disabled?
    $userDisable = new Disable($dataDir.'/users/disabled');
    if ($userDisable->getDisable($userId)) {
        syslog(LOG_INFO, sprintf('client not allowed, user "%s" is disabled', $userId));
        exit(1);
    }

    // common name disabled?
    $commonNameDisable = new Disable($dataDir.'/common_names/disabled');
    if ($commonNameDisable->getDisable($commonName)) {
        syslog(LOG_INFO, sprintf('client not allowed, CN "%s" is disabled', $commonName));
        exit(1);
    }

    // in ACL, if enabled?
    $poolId = $envData['POOL_ID'];
    $pools = new Pools($poolsConfig->v('pools'));
    $pool = $pools[$poolId];

    if ($pool->getEnableAcl()) {
        // ACL
        $aclGroupList = $pool->getAclGroupList();
        $aclMethod = $aclConfig->v('aclMethod');
        $aclClass = sprintf('fkooman\VPN\Server\Acl\%s', $aclMethod);
        $acl = new $aclClass($aclConfig);
        $memberOf = $acl->getGroups($userId);

        if (!isMember($memberOf, $aclGroupList)) {
            syslog(LOG_INFO, sprintf('client not allowed, user "%s" is not a member of "%s"', $userId, implode(',', $aclGroupList)));
            exit(1);
        }
    }

    // log the connection
    $logData = array(
        'pool_id' => $envData['POOL_ID'],
        'common_name' => $commonName,
        'v4' => $envData['ifconfig_pool_remote_ip'],
        'v6' => $envData['ifconfig_pool_remote_ip6'],
        'time_unix' => $envData['time_unix'],
    );
    syslog(LOG_INFO, json_encode($logData));
} catch (Exception $e) {
    syslog(LOG_ERR, $e->getMessage());
    exit(66);
}

function isMember(array $memberOf, array $aclGroupList)
{
    // one of the groups must be listed in the pool ACL list
    foreach ($memberOf as $memberGroup) {
        if (in_array($memberGroup['id'], $aclGroupList)) {
            return true;
        }
    }

    return false;
}
