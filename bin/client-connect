#!/usr/bin/php
<?php

require_once dirname(__DIR__).'/vendor/autoload.php';

use Monolog\Logger;
use Monolog\Handler\SyslogHandler;
use Monolog\Formatter\LineFormatter;
use fkooman\Config\YamlFile;
use fkooman\VPN\Server\Utils;
use fkooman\Config\Reader;
use fkooman\VPN\Server\AddressPool;
use fkooman\VPN\Server\ConnectionLog;
use fkooman\Json\Json;

try {
    $logger = new Logger('vpn-server-api');
    $syslog = new SyslogHandler('vpn-server-api', 'user');
    $formatter = new LineFormatter();
    $syslog->setFormatter($formatter);
    $logger->pushHandler($syslog);

    $config = new Reader(
        new YamlFile(dirname(__DIR__).'/config/client.yaml')
    );

    // IPv6
    $v6p = $config->v('IPv6', 'prefix', false, 'fd00:1234:1234:1234');
    $v6r = sprintf('%s::1', $v6p);

    // IPv4
    $v4s = $config->v('IPv4', 'poolStart', false, '10.10.10.5');
    $v4e = $config->v('IPv4', 'poolEnd', false, '10.10.10.50');
    $v4n = $config->v('IPv4', 'netmask', false, '255.255.255.0');

    $ipPoolDir = $config->v('IPv4', 'ipPoolDir', false, '/var/lib/openvpn/pool');
    $staticConfigDir = $config->v('IPv4', 'staticConfigDir', false, sprintf('%s/data/static', dirname(__DIR__)));

    $envData = [];
    $envKeys = [
        'common_name',
        'time_unix',
        'dev',
    ];

    foreach ($envKeys as $envKey) {
        $envValue = getenv($envKey);
        if (empty($envValue)) {
            throw new RuntimeException(sprintf('environment variable "%s" is not set', $envKey));
        }
        $envData[$envKey] = $envValue;
    }

    if ($argc < 2) {
        throw new RuntimeException('temporary client configuration file not specified');
    }
    $tmpConfig = $argv[1];

    $staticConfigFile = sprintf('%s/%s', $staticConfigDir, $envData['common_name']);

    // defaults
    $disable = false;
    $v4 = null;
    $v6 = null;

    // ** STATIC **
    if (file_exists($staticConfigFile)) {
        $jsonData = Json::decodeFile($staticConfigFile);
        if (array_key_exists('disable', $jsonData) && $jsonData['disable']) {
            $disable = true;
        }
        if (array_key_exists('v4', $jsonData) && !is_null($jsonData['v4'])) {
            $v4 = $jsonData['v4'];
            $v6 = AddressPool::getIp6($v6p, $v4);
        }
    }

    // ** NOT STATIC **
    if (is_null($v4)) {
        // find a free IP address
        $usedIpList = [];
        foreach (glob(sprintf('%s/*', $ipPoolDir)) as $ipFile) {
            $usedIpList[] = basename($ipFile);
        }
        $v4 = AddressPool::getIp4($v4s, $v4e, $usedIpList);
        $v6 = AddressPool::getIp6($v6p, $v4);

        if (false === @touch(sprintf('%s/%s', $ipPoolDir, $v4))) {
            throw new RuntimeException('unable to reserve IP address');
        }
    }

    if ($disable) {
        /* DISABLED **/
        $configFileData[] = 'disable';
    } else {
        // ** NOT DISABLED **
        if ($v4) {
            $configFileData[] = sprintf('ifconfig-push %s %s', $v4, $v4n);
            $cmd = sprintf('/usr/bin/sudo /sbin/ip -4 ro add %s/32 dev %s', $v4, $envData['dev']);
            //Utils::exec($cmd);
        }
        if ($v6) {
            $configFileData[] = sprintf('ifconfig-ipv6-push %s/64 %s', $v6, $v6r);
            $cmd = sprintf('/usr/bin/sudo /sbin/ip -6 ro add %s/128 dev %s', $v6, $envData['dev']);
            //Utils::exec($cmd);
        }
    }

    if (false === @file_put_contents($tmpConfig, implode(PHP_EOL, $configFileData))) {
        throw new RuntimeException('unable to write temporary config file');
    }

    $logData = array(
        'common_name' => $envData['common_name'],
        'v4' => $v4,
        'v6' => $v6,
        'time_unix' => $envData['time_unix'],
        'dev' => $envData['dev'],
    );

    $logger->addInfo('client-connect', $logData);

    $db = new PDO(
        $config->v('Log', 'dsn'),
        $config->v('Log', 'username', false),
        $config->v('Log', 'password', false)
    );

    $connectionLog = new ConnectionLog($db);
    $connectionLog->connect($logData);
} catch (Exception $e) {
    syslog(LOG_ERR, $e->getMessage());
    exit(66);
}
