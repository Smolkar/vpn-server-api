#!/usr/bin/php
<?php

require_once dirname(__DIR__).'/vendor/autoload.php';

use fkooman\Config\YamlFile;
use fkooman\VPN\Server\Utils;
use fkooman\Config\Reader;
use fkooman\VPN\Server\Config\AddressPool;
use fkooman\VPN\Server\Log\ConnectionLog;
use fkooman\Json\Json;
use fkooman\VPN\Server\Config\IP;

openlog(
    basename($argv[0]),
    LOG_PERROR,
    LOG_USER
);

try {
    $config = new Reader(
        new YamlFile(dirname(__DIR__).'/config/client.yaml')
    );

    // IPv6
    $v6p = $config->v('IPv6', 'prefix', false, 'fd00:1234:1234:1234');
    $v6r = sprintf('%s::1', $v6p);

    // IPv4
    $ipRange = new IP($config->v('IPv4', 'ipRange', false, '10.10.10.0/24'));
    $poolRange = new IP($config->v('IPv4', 'poolRange', false, '10.10.10.128/25'));

    $v4s = $poolRange->getFirstHost();
    $v4e = $poolRange->getLastHost();
    $v4n = $ipRange->getNetmask();

    $ipPoolDir = $config->v('IPv4', 'ipPoolDir', false, '/var/lib/openvpn/pool');
    $staticConfigDir = $config->v('IPv4', 'staticConfigDir', false, sprintf('%s/data/static', dirname(__DIR__)));

    $envData = [];
    $envKeys = [
        'common_name',
        'time_unix',
        'dev',
    ];

    foreach ($envKeys as $envKey) {
        $envValue = getenv($envKey);
        if (empty($envValue)) {
            throw new RuntimeException(sprintf('environment variable "%s" is not set', $envKey));
        }
        $envData[$envKey] = $envValue;
    }

    if ($argc < 2) {
        throw new RuntimeException('temporary client configuration file not specified');
    }
    $tmpConfig = $argv[1];

    $staticConfigFile = sprintf('%s/%s', $staticConfigDir, $envData['common_name']);

    // read static config if it exists
    if (file_exists($staticConfigFile)) {
        $staticConfig = Json::decodeFile($staticConfigFile);
    } else {
        $staticConfig = array();
    }

    // check if CN is disabled
    if (array_key_exists('disable', $staticConfig) && $staticConfig['disable']) {
        // yes, disabled
        Utils::writeTempConfig($tmpConfig, array('disable'));
        exit(0);
    }

    // check if it has a static IPv4 address
    if (array_key_exists('v4', $staticConfig) && !is_null($staticConfig['v4'])) {
        // has static 
        $v4 = $staticConfig['v4'];
        $v6 = AddressPool::getIp6($v6p, $v4);
    } else {
        // no static, use pool
        $usedIpList = Utils::getUsedIpList($ipPoolDir);
        $v4 = AddressPool::getIp4($v4s, $v4e, $usedIpList);
        $v6 = AddressPool::getIp6($v6p, $v4);
    }

    // try to delete routes first, maybe there are stale leftovers somehow, 
    // but if it fails it is okay, as they may not have been set if the 
    // previous connection was cleaned up nicely
    try {
        Utils::delRoute4($v4);
    } catch (RuntimeException $e) {
        syslog(LOG_WARN, sprintf('unable to delete route for "%s"', $v4));
    }
    try {
        Utils::delRoute6($v6);
    } catch (RuntimeException $e) {
        syslog(LOG_WARN, sprintf('unable to delete route for "%s"', $v6));
    }

    // add routes
    Utils::addRoute4($v4, $envData['dev']);
    Utils::addRoute6($v6, $envData['dev']);

    // mark the IP address as used    
    if (false === @touch(sprintf('%s/%s', $ipPoolDir, $v4))) {
        throw new RuntimeException(sprintf('unable to claim IP address "%s"', $v4));
    }

    // create temporary client config
    $configFileData = array(
        sprintf('ifconfig-push %s %s', $v4, $v4n),
        sprintf('ifconfig-ipv6-push %s/64 %s', $v6, $v6r),
    );
    Utils::writeTempConfig($tmpConfig, $configFileData);

    // log stuff
    $logData = array(
        'common_name' => $envData['common_name'],
        'v4' => $v4,
        'v6' => $v6,
        'time_unix' => $envData['time_unix'],
        'dev' => $envData['dev'],
    );
    syslog(LOG_INFO, json_encode($logData));

    $db = new PDO(
        $config->v('Log', 'dsn'),
        $config->v('Log', 'username', false),
        $config->v('Log', 'password', false)
    );

    $connectionLog = new ConnectionLog($db);
    $connectionLog->connect($logData);
} catch (Exception $e) {
    syslog(LOG_ERR, $e->getMessage());
    exit(66);
}
