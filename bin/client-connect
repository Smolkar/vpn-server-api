#!/usr/bin/php
<?php
/**
 * Copyright 2015 FranÃ§ois Kooman <fkooman@tuxed.net>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
require_once dirname(__DIR__).'/vendor/autoload.php';

use fkooman\Config\Reader;
use fkooman\Config\YamlFile;
use fkooman\Json\Json;
use fkooman\VPN\Server\Config\AddressPool;
use fkooman\VPN\Server\Config\FileConfigStorage;
use fkooman\VPN\Server\Config\IP;
use fkooman\VPN\Server\Config\PoolConfig;
use fkooman\VPN\Server\Log\ConnectionLog;
use fkooman\VPN\Server\Utils;

openlog(
    basename($argv[0]),
    LOG_PERROR,
    LOG_USER
);

# global, we need those for cleanup if something goes wrong
$v4 = null;
$v6 = null;
$leaseDir = null;

try {
    // OpenVPN specifies a temporary file to write a configuration for that 
    // particular CN to
    if ($argc < 2) {
        throw new RuntimeException('temporary CN configuration file not specified');
    }
    $cnConfigFile = $argv[1];

    $envData = [];
    $envKeys = [
        'common_name',
        'time_unix',
        'dev',
    ];

    // read environment variables
    foreach ($envKeys as $envKey) {
        $envValue = getenv($envKey);
        if (empty($envValue)) {
            throw new RuntimeException(sprintf('environment variable "%s" is not set', $envKey));
        }
        $envData[$envKey] = $envValue;
    }

    // read configuration
    $ipConfig = new Reader(
        new YamlFile(dirname(__DIR__).'/config/ip.yaml')
    );

    $logConfig = new Reader(
        new YamlFile(dirname(__DIR__).'/config/log.yaml')
    );

    // read the CN configuration
    $configDir = $ipConfig->v('configDir');
    $configStorage = new FileConfigStorage($configDir);
    $cnConfig = $configStorage->getConfig($envData['common_name']);

    // is the CN disabled?
    if ($cnConfig->getDisable()) {
        syslog(LOG_INFO, sprintf('"%s" not allowed, disabled by administrator', $envData['common_name']));
        exit(1);
    }

    // get the pool
    $cnPool = $cnConfig->getPool();

    // the full client IP range
    $ipRange = new IP($ipConfig->v('v4', 'range'));

    // the pool IP range
    $poolConfig = new PoolConfig($cnPool, $ipConfig->v('v4', 'pools', $cnPool));

    syslog(LOG_INFO, sprintf('"%s" connecting to pool "%s"', $envData['common_name'], $poolConfig->getName()));
    $poolRange = new IP($poolConfig->getRange());

    $v4s = $poolRange->getFirstHost();
    $v4e = $poolRange->getLastHost();
    $v4n = $ipRange->getNetmask();
    $v6p = $ipConfig->v('v6', 'prefix');
    $v6r = sprintf('%s::1', $v6p);

    $leaseDir = $ipConfig->v('leaseDir');

    $activeLeases = array_merge(
        [$ipRange->getFirstHost()], // the IP address of the VPN server cannot be used 
        Utils::getActiveLeases($leaseDir)
    );
    if (false === $v4 = AddressPool::getIp4($v4s, $v4e, $activeLeases)) {
        syslog(LOG_WARN, sprintf('"%s" could not connect, ran out of IP space', $envData['common_name']));
        exit(33);
    }
    $v6 = AddressPool::getIp6($v6p, $v4);

    Utils::addRoute4($v4, $envData['dev']);
    Utils::addRoute6($v6, $envData['dev']);

    // mark the IP address as used    
    if (false === @touch(sprintf('%s/%s', $leaseDir, $v4))) {
        throw new RuntimeException(sprintf('unable to claim IP address "%s"', $v4));
    }

    // XXX refactor this in a class so we can actually test the config file
    // generation

    // create temporary client config
    $configFileData = array(
        sprintf('ifconfig-push %s %s', $v4, $v4n),
        sprintf('ifconfig-ipv6-push %s/64 %s', $v6, $v6r),
    );

    if ($poolConfig->useDefaultGateway()) {
        // push both v6 and v4 default gw + DNS
        // this is the default, so do nothing here
#        $configFileData[] = 'push "redirect-gateway def1 bypass-dhcp"';
#        $configFileData[] = 'push "route 0.0.0.0 0.0.0.0"';
#        $configFileData[] = 'push "redirect-gateway ipv6"';
#        $configFileData[] = 'push "route-ipv6 2000::/3"';
#        // XXX also push DNS
    } else {
        $dstNet4 = $poolConfig->getDstNet4();
        foreach ($dstNet4 as $net4) {
            $ip4 = new IP($net4);
            $configFileData[] = sprintf('push "route %s %s"', $ip4->getNetwork(), $ip4->getNetmask());
        }
        $dstNet6 = $poolConfig->getDstNet6();
        foreach ($dstNet6 as $net6) {
            $configFileData[] = sprintf('push "route-ipv6 %s"', $net6);
        }
    }

    Utils::writeTempConfig($cnConfigFile, $configFileData);

    // log stuff
    $logData = array(
        'common_name' => $envData['common_name'],
        'v4' => $v4,
        'v6' => Utils::normalizeIP($v6),
        'time_unix' => $envData['time_unix'],
        'dev' => $envData['dev'],
    );
    syslog(LOG_INFO, Json::encode($logData));

    $db = new PDO(
        $logConfig->v('log', 'dsn'),
        $logConfig->v('log', 'username', false),
        $logConfig->v('log', 'password', false)
    );

    $connectionLog = new ConnectionLog($db);
    $connectionLog->connect($logData);
} catch (Exception $e) {
    syslog(LOG_ERR, $e->getMessage());

    // remove the lease file if it was created
    if (!is_null($leaseDir) && !is_null($v4)) {
        $leaseFile = sprintf('%s/%s', $leaseDir, $v4);
        if (@file_exists($leaseFile)) {
            @unlink($leaseFile);
        }
    }

    // remove routes if they exist
    if (!is_null($v4)) {
        Utils::delRoute4($v4, false);
    }
    if (!is_null($v6)) {
        Utils::delRoute6($v6, false);
    }

    exit(66);
}
