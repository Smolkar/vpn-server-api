#!/usr/bin/php
<?php
/**
 * Copyright 2015 FranÃ§ois Kooman <fkooman@tuxed.net>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
require_once dirname(__DIR__).'/vendor/autoload.php';

use fkooman\Config\Reader;
use fkooman\Config\YamlFile;
use fkooman\VPN\Server\CnConfig\CnConfig;
use fkooman\VPN\Server\UserConfig\UserConfig;
use fkooman\VPN\Server\Log\ConnectionLog;
use fkooman\IO\IO;
use fkooman\Json\Json;

openlog(
    basename($argv[0]),
    LOG_PERROR,
    LOG_USER
);

try {
    // OpenVPN specifies a temporary file to write a configuration for that 
    // particular CN to
    if ($argc < 2) {
        throw new RuntimeException('temporary CN configuration file not specified');
    }
    $cnConfigFile = $argv[1];

    $envData = [];
    $envKeys = [
        'common_name',
        'time_unix',
        'dev',
        'ifconfig_pool_remote_ip',
        'ifconfig_pool_remote_ip6',
    ];

    // read environment variables
    foreach ($envKeys as $envKey) {
        $envValue = getenv($envKey);
        if (empty($envValue)) {
            throw new RuntimeException(sprintf('environment variable "%s" is not set', $envKey));
        }
        $envData[$envKey] = $envValue;
    }

    $commonName = $envData['common_name'];
    $userId = substr($commonName, 0, strpos($commonName, '_'));

    // read configuration
    $ipConfig = new Reader(
        new YamlFile(dirname(__DIR__).'/config/ip.yaml')
    );

    $logConfig = new Reader(
        new YamlFile(dirname(__DIR__).'/config/log.yaml')
    );

    // retrieve the user's configuration file
    $io = new IO();
    $userFile = sprintf('%s/users/%s', $ipConfig->v('configDir'), $userId);
    if (!$io->isFile($userFile)) {
        $userConfig = new UserConfig([]);
    } else {
        $userConfig = new UserConfig(
            Json::decode(
                $io->readFile($userFile)
            )
        );
    }

    // retrieve the cn's configuration file
    $io = new IO();
    $commonNameFile = sprintf('%s/common_names/%s', $ipConfig->v('configDir'), $commonName);
    if (!$io->isFile($commonNameFile)) {
        $cnConfig = new CnConfig([]);
    } else {
        $cnConfig = new CnConfig(
            Json::decode(
                $io->readFile($commonNameFile)
            )
        );
    }

    $dropClient = false;
    // check if the user is disabled
    if ($userConfig->getDisable()) {
        syslog(LOG_INFO, sprintf('client not allowed, user "%s" is disabled', $userId));
        $dropClient = true;
    }
    // if user not disabled, maybe the CN is
    if ($cnConfig->getDisable()) {
        syslog(LOG_INFO, sprintf('client not allowed, CN "%s" is disabled', $commonName));
        $dropClient = true;
    }

    if ($dropClient) {
        // write the configuration file
        if (false === @file_put_contents($cnConfigFile, 'disable')) {
            throw new RuntimeException('unable to write CN configuration file');
        }
        exit(0);
    }

    // log the connection
    $logData = array(
        'common_name' => $commonName,
        'v4' => $envData['ifconfig_pool_remote_ip'],
        'v6' => $envData['ifconfig_pool_remote_ip6'],
        'time_unix' => $envData['time_unix'],
        'dev' => $envData['dev'],
    );
    syslog(LOG_INFO, Json::encode($logData));

    $db = new PDO(
        $logConfig->v('log', 'dsn'),
        $logConfig->v('log', 'username', false),
        $logConfig->v('log', 'password', false)
    );

    $connectionLog = new ConnectionLog($db);
    $connectionLog->connect($logData);
} catch (Exception $e) {
    syslog(LOG_ERR, $e->getMessage());
    exit(66);
}
