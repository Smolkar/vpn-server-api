#!/usr/bin/php
<?php

require_once dirname(__DIR__).'/vendor/autoload.php';

use fkooman\Config\Reader;
use fkooman\Config\YamlFile;
use fkooman\VPN\Server\Utils;
use fkooman\VPN\Server\AddressPool;

try {
#    $reader = new Reader(
#        new YamlFile(dirname(__DIR__).'/config/log.yaml')
#    );

    // XXX get this from config
    $v6p = 'fd00:4242:4242:4242'; // IPv6 prefix
    $v6r = 'fd00:4242:4242:4242::1'; // IPv6 router
    $v4s = '10.42.42.129'; // start of IPv4 pool
    $v4e = '10.42.42.254'; // end of IPv4 pool
    $v4n = '255.255.255.0'; // IPv4 netmask
    $ipPoolDir = '/var/lib/openvpn/pool';
    $clientConfigDir = sprintf('%s/data/ccd', dirname(__DIR__));

    $envData = [];
    $envKeys = [
        'common_name',
        //'time_unix',
        //'ifconfig_pool_remote_ip',
        //'ifconfig_ipv6_remote',
        'dev',
    ];
    foreach ($envKeys as $envKey) {
        $envData[$envKey] = getenv($envKey);
    }

    // tmp configuration file used for clientConfig (provided by OpenVPN)
    $tmpConfig = $argv[1];

    // check if CN as file is available in CCD
    $ccdFile = sprintf('%s/%s', $clientConfigDir, $envData['common_name']);
    if (file_exists($ccdFile)) {
        // ** USE STATIC **
        // XXX more robust reading!
        $disable = false;
        $json = json_decode(file_get_contents($ccdFile), true);
        if (array_key_exists('disable', $json) && $json['disable']) {
            $disable = true;
        }
        if (array_key_exists('v4', $json)) {
            $v4 = $json['v4'];
        } else {
            $v4 = '192.168.99.99';
        }
        $v6 = AddressPool::getIp6($v6p, $v4);

    } else {
        // ** USE POOL **

        // find a free IP address
        $usedIpList = [];
        foreach (glob(sprintf('%s/*', $ipPoolDir)) as $ipFile) {
            $usedIpList[] = basename($ipFile);
        }
        $v4 = AddressPool::getIp4($v4s, $v4e, $usedIpList);
        $v6 = AddressPool::getIp6($v6p, $v4);
        $disable = false;

        // XXX check return value
        touch(sprintf('%s/%s', $ipPoolDir, $v4));
    }

    if ($disable) {
        /* DISABLED **/
        $configFileData[] = 'disable';
    } else {
        // ** NOT DISABLED **
        if ($v4) {
            $configFileData[] = sprintf('ifconfig-push %s %s', $v4, $v4n);
            $cmd = sprintf('/usr/bin/sudo /sbin/ip -4 ro add %s/32 dev %s', $v4, $envData['dev']);
#            echo $cmd.PHP_EOL;
            try {
                Utils::exec($cmd);
            } catch (RuntimeException $e) {
                exit(1);
            }
        }
        if ($v6) {
            $configFileData[] = sprintf('ifconfig-ipv6-push %s/64 %s', $v6, $v6r);
            $cmd = sprintf('/usr/bin/sudo /sbin/ip -6 ro add %s/128 dev %s', $v6, $envData['dev']);
#            echo $cmd.PHP_EOL;
            try {
                Utils::exec($cmd);
            } catch (RuntimeException $e) {
                exit(1);
            }
        }
    }

    // XXX check return value
    file_put_contents($tmpConfig, implode(PHP_EOL, $configFileData));
} catch (Exception $e) {
    // we do not want the connection to fail when we cannot log the 
    // connection
}
