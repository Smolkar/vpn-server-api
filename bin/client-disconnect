#!/usr/bin/php
<?php
/**
 * Copyright 2015 FranÃ§ois Kooman <fkooman@tuxed.net>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
require_once dirname(__DIR__).'/vendor/autoload.php';

use fkooman\Config\Reader;
use fkooman\Config\YamlFile;
use fkooman\VPN\Server\Log\ConnectionLog;
use fkooman\VPN\Server\Utils;
use fkooman\Json\Json;

openlog(
    basename($argv[0]),
    LOG_PERROR,
    LOG_USER
);

try {
    $config = new Reader(
        new YamlFile(dirname(__DIR__).'/config/client.yaml')
    );

    $ipPoolDir = $config->v('IPv4', 'ipPoolDir', false, '/var/lib/openvpn/pool');

    $envData = [];
    $envKeys = [
        'common_name',
        'time_unix',
        'ifconfig_pool_remote_ip',
        'ifconfig_pool_remote_ip6',
        'bytes_received',
        'bytes_sent',
        'dev',
    ];

    foreach ($envKeys as $envKey) {
        $envValue = getenv($envKey);
        if (empty($envValue)) {
            throw new RuntimeException(sprintf('environment variable "%s" is not set', $envKey));
        }
        $envData[$envKey] = $envValue;
    }

    // XXX validate the environment variables
    $v4 = $envData['ifconfig_pool_remote_ip'];
    $v6 = $envData['ifconfig_pool_remote_ip6'];

    if (false === @unlink(sprintf('%s/%s', $ipPoolDir, $v4))) {
        throw new RuntimeException(sprintf('unable to release IP address "%s"', $v4));
    }

    $logData = array(
        'common_name' => $envData['common_name'],
        'v4' => $v4,
        'v6' => $v6,
        'time_unix' => $envData['time_unix'],
        'disconnect_time_unix' => time(),
        'bytes_received' => $envData['bytes_received'],
        'bytes_sent' => $envData['bytes_sent'],
    );

    syslog(LOG_INFO, Json::encode($logData));

    $db = new PDO(
        $config->v('Log', 'dsn'),
        $config->v('Log', 'username', false),
        $config->v('Log', 'password', false)
    );
    $connectionLog = new ConnectionLog($db);
    $connectionLog->disconnect($logData);

    try {
        Utils::delRoute4($v4);
    } catch (RuntimeException $e) {
        syslog(LOG_WARN, sprintf('unable to delete route for "%s"', $v4));
    }
    try {
        Utils::delRoute6($v6);
    } catch (RuntimeException $e) {
        syslog(LOG_WARN, sprintf('unable to delete route for "%s"', $v6));
    }
} catch (Exception $e) {
    syslog(LOG_ERR, $e->getMessage());
    exit(66);
}
