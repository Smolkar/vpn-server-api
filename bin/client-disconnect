#!/usr/bin/php
<?php

require_once dirname(__DIR__).'/vendor/autoload.php';

use Monolog\Logger;
use Monolog\Handler\SyslogHandler;
use Monolog\Formatter\LineFormatter;
use fkooman\Config\Reader;
use fkooman\Config\YamlFile;
use fkooman\VPN\Server\Utils;

try {
    $logger = new Logger('vpn-server-api');
    $syslog = new SyslogHandler('vpn-server-api', 'user');
    $formatter = new LineFormatter();
    $syslog->setFormatter($formatter);
    $logger->pushHandler($syslog);

    $reader = new Reader(
        new YamlFile(dirname(__DIR__).'/config/client.yaml')
    );

    $envData = [];
    $envKeys = [
        'common_name',
        'time_unix',
        'ifconfig_pool_remote_ip',
        'ifconfig_ipv6_remote',
        'bytes_received',
        'bytes_sent',
        'disconnect_time_unix',
        'dev',
    ];

    foreach ($envKeys as $envKey) {
        $envData[$envKey] = getenv($envKey);
    }

    $v4 = $envData['ifconfig_pool_remote_ip'];
    $v6 = $envData['ifconfig_ipv6_remote'];

    if ($v4) {
        $cmd = sprintf('/usr/bin/sudo /sbin/ip -4 ro del %s/32 dev %s', $v4, $envData['dev']);
        try {
            Utils::exec($cmd);
        } catch (RuntimeException $e) {
            exit(1);
        }
    }
    if ($v6) {
        $cmd = sprintf('/usr/bin/sudo /sbin/ip -6 ro del %s/128 dev %s', $v6, $envData['dev']);
        try {
            Utils::exec($cmd);
        } catch (RuntimeException $e) {
            exit(1);
        }
    }

    $logger->addInfo(
        'client-disconnect',
        array(
            'common_name' => $envData['common_name'],
            'v4' => $v4,
            'v6' => $v6,
            'time_unix' => $envData['time_unix'],
            'disconnect_time_unix' => $envData['disconnect_time_unix'],
            'bytes_received' => $envData['bytes_received'],
            'bytes_sent' => $envData['bytes_sent'],
        )
    );
} catch (Exception $e) {
    // we do not want the connection to fail when we cannot log the 
    // connection
}
