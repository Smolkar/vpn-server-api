#!/usr/bin/php
<?php

require_once dirname(__DIR__).'/vendor/autoload.php';

use Monolog\Logger;
use Monolog\Handler\SyslogHandler;
use Monolog\Formatter\LineFormatter;
use fkooman\Config\Reader;
use fkooman\Config\YamlFile;
use fkooman\VPN\Server\Utils;
use fkooman\VPN\Server\ConnectionLog;

try {
    $logger = new Logger('vpn-server-api');
    $syslog = new SyslogHandler('vpn-server-api', 'user');
    $formatter = new LineFormatter();
    $syslog->setFormatter($formatter);
    $logger->pushHandler($syslog);

    $config = new Reader(
        new YamlFile(dirname(__DIR__).'/config/client.yaml')
    );

    $ipPoolDir = $config->v('IPv4', 'ipPoolDir', false, '/var/lib/openvpn/pool');

    $envData = [];
    $envKeys = [
        'common_name',
        'time_unix',
        'ifconfig_pool_remote_ip',
        'ifconfig_pool_remote_ip6',
        'bytes_received',
        'bytes_sent',
        'dev',
    ];

    foreach ($envKeys as $envKey) {
        $envValue = getenv($envKey);
        if (empty($envValue)) {
            throw new RuntimeException(sprintf('environment variable "%s" is not set', $envKey));
        }
        $envData[$envKey] = $envValue;
    }

    $v4 = $envData['ifconfig_pool_remote_ip'];
    $v6 = $envData['ifconfig_pool_remote_ip6'];

    if ($v4) {
        $cmd = sprintf('/usr/bin/sudo /sbin/ip -4 ro del %s/32 dev %s', $v4, $envData['dev']);
        Utils::exec($cmd);
    }
    if ($v6) {
        $cmd = sprintf('/usr/bin/sudo /sbin/ip -6 ro del %s/128 dev %s', $v6, $envData['dev']);
        Utils::exec($cmd);
    }

    // XXX should only remove if it was from the pool, not from a static assignment
    if (false === @unlink(sprintf('%s/%s', $ipPoolDir, $v4))) {
        //throw new RuntimeException('unable to unreserve IP address');
    }

    $logData = array(
        'common_name' => $envData['common_name'],
        'v4' => $v4,
        'v6' => $v6,
        'time_unix' => $envData['time_unix'],
        'bytes_received' => $envData['bytes_received'],
        'bytes_sent' => $envData['bytes_sent'],
    );

    $logger->addInfo('client-disconnect', $logData);

    $db = new PDO(
        $config->v('Log', 'dsn'),
        $config->v('Log', 'username', false),
        $config->v('Log', 'password', false)
    );
    $connectionLog = new ConnectionLog($db);
    $connectionLog->disconnect($logData);
} catch (Exception $e) {
    error_log($e->getMessage());
    exit(66);
}
