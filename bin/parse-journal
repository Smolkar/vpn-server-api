#!/usr/bin/php
<?php
/**
 * Copyright 2016 FranÃ§ois Kooman <fkooman@tuxed.net>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse the systemd journal.
 *
 * Usage:
 *
 * $ sudo journalctl \
 *     -o json \
 *     -t vpn-server-api-client-connect \
 *     -t vpn-server-api-client-disconnect \
 *     | vpn-server-api-parse-journal
 */
$clientConnectSyslogIdentifier = 'vpn-server-api-client-connect';
$clientDisconnectSyslogIdentifier = 'vpn-server-api-client-disconnect';

$logData = [
    'entries' => [],
];

$maxConcurrentUsers = 0;
$concurrentUsers = 0;
$totalDataTransferred = 0;
$uniqueUserList = [];

// every line is a JSON object
while ($jsonLine = fgets(STDIN)) {
    $jsonData = json_decode($jsonLine, true);

    if ($clientConnectSyslogIdentifier === $jsonData['SYSLOG_IDENTIFIER']) {

        // handle connect data
        $message = $jsonData['MESSAGE'];
        $messageData = json_decode($message, true);
        if (JSON_ERROR_NONE !== json_last_error()) {
            // XXX if an error occurred decoding the message, it was 
            // probably a log error message, ignore them for now, but later we
            // will need them as well!
            continue;
        }

        ++$concurrentUsers;
        if ($concurrentUsers > $maxConcurrentUsers) {
            $maxConcurrentUsers = $concurrentUsers;
        }

        $commonName = $messageData['common_name'];
        $userId = explode('_', $commonName, 2)[0];
        if (!in_array($userId, $uniqueUserList)) {
            $uniqueUserList[] = $userId;
        }

        $logKey = sprintf('%s:%s', $messageData['common_name'], $messageData['time_unix']);
        $logData['entries'][$logKey] = [
            'v4' => $messageData['v4'],
            'v6' => $messageData['v6'],
            'connect_time' => intval($messageData['time_unix']),
        ];
    }

    if ($clientDisconnectSyslogIdentifier === $jsonData['SYSLOG_IDENTIFIER']) {
        // handle connect data
        $message = $jsonData['MESSAGE'];
        $messageData = json_decode($message, true);
        if (JSON_ERROR_NONE !== json_last_error()) {
            // XXX if an error occurred decoding the message, it was 
            // probably a log error message, ignore them for now, but later we
            // will need them as well!
            continue;
        }

        --$concurrentUsers;

        $logKey = sprintf('%s:%s', $messageData['common_name'], $messageData['time_unix']);
        if (!array_key_exists($logKey, $logData['entries'])) {
            // XXX we did not find a matching connect entry... handle this somehow
            continue;
        }
        $dataTransferred = $messageData['bytes_sent'] + $messageData['bytes_received'];
        $totalDataTransferred += $dataTransferred;

        $logData['entries'][$logKey] = array_merge(
            $logData['entries'][$logKey],
            [
                'disconnect_time' => $messageData['disconnect_time_unix'],
                'data_transferred' => $dataTransferred,
            ]
        );
    }
}

$logData['total_data_transferred'] = $totalDataTransferred;
$logData['unique_users'] = count($uniqueUserList);
$logData['number_of_connections'] = count($logData['entries']);
$logData['max_concurrent_users'] = $maxConcurrentUsers;

echo json_encode($logData);
