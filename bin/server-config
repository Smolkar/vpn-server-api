#!/usr/bin/php
<?php

/**
 * Copyright 2015 FranÃ§ois Kooman <fkooman@tuxed.net>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
require_once dirname(__DIR__).'/vendor/autoload.php';

use fkooman\VPN\Server\Config\ServerConfig;
use fkooman\Config\Reader;
use fkooman\Config\YamlFile;
use GuzzleHttp\Client;
use fkooman\VPN\Server\Config\IPv4;
use fkooman\VPN\Server\Config\IPv6;
use fkooman\VPN\Server\Utils;

try {
    $dhLength = 2048;

    // get common name from first parameter
    if (2 > $argc) {
        $syntaxMessage = [
            sprintf('syntax: %s [cn]', $argv[0]),
        ];

        throw new Exception(implode(PHP_EOL, $syntaxMessage));
    }
    $commonName = $argv[1];

    $mainConfig = new Reader(
        new YamlFile(dirname(__DIR__).'/config/config.yaml')
    );

    $ipConfig = new Reader(
        new YamlFile(dirname(__DIR__).'/config/ip.yaml')
    );

    $client = new Client(
        [
            'defaults' => [
                'headers' => [
                    'Authorization' => sprintf('Bearer %s', $mainConfig->v('remoteApi', 'vpn-ca-api', 'token')),
                ],
            ],
        ]
    );

    $requestUri = $mainConfig->v('remoteApi', 'vpn-ca-api', 'uri');

    $configData = $client->post(
        $requestUri.'/certificate/',
        [
            'headers' => [
                'Accept' => 'application/json',
            ],
            'body' => [
                'common_name' => $commonName,
                'cert_type' => 'server',
            ],
        ]
    )->json();

    $dhFile = tempnam(sys_get_temp_dir(), 'dh_');
    Utils::exec(sprintf('/usr/bin/openssl dhparam -out %s %d >/dev/null 2>/dev/null', $dhFile, $dhLength));

    if (false === $dhContent = @file_get_contents($dhFile)) {
        throw new Exception('unable to read DH file');
    }

    $dhParam = ['dh' => trim($dhContent)];
    @unlink($dhFile); // we don't care if this fails
#    $dhParam = ['dh' => 'foo'];

    $serverConfig = new ServerConfig();

    $openVpnConfig = $mainConfig->v('openVpn');

    $instanceCount = count($openVpnConfig);
    $ip4 = new IPv4($ipConfig->v('v4', 'range'));
    $ip6 = new IPv6($ipConfig->v('v6', 'prefix'));

    $ip4Ranges = $ip4->splitRange($instanceCount);
    $ip6Ranges = $ip6->splitRange($instanceCount);

    $dns4 = $ipConfig->v('v4', 'dns');
    $dns6 = $ipConfig->v('v6', 'dns');

    $i = 0;
    foreach ($openVpnConfig as $k => $v) {
        $ip4Range = new IPv4($ip4Ranges[$i]);
        $ip6Range = new IPv6($ip6Ranges[$i]);

        $ipConfig = [
            'v4_network' => $ip4Range->getNetwork(),
            'v4_netmask' => $ip4Range->getNetmask(),
            'v6_prefix' => $ip6Range->getRange(),
            'dns' => array_merge($dns4, $dns6),
        ];

        $instanceConfig = [];
        $instanceConfig['dev'] = sprintf('tun-%s', $k);
        if ('udp' === $v['proto']) {
            $instanceConfig['proto'] = 'udp6';
        } else {
            $instanceConfig['proto'] = 'tcp-server';
        }
        $instanceConfig['port'] = $v['port'];
        $instanceConfig['management_port'] = $v['managementPort'];
        $vpnConfig = implode(PHP_EOL, $serverConfig->get(array_merge($instanceConfig, $dhParam, $ipConfig, $configData['certificate'])));
        file_put_contents(sprintf('/etc/openvpn/server-%s.conf', $k), $vpnConfig);

        ++$i;
    }
} catch (Exception $e) {
    echo $e->getMessage().PHP_EOL;
    exit(1);
}
