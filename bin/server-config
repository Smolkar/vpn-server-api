#!/usr/bin/php
<?php

/**
 * Copyright 2016 FranÃ§ois Kooman <fkooman@tuxed.net>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
require_once dirname(__DIR__).'/vendor/autoload.php';

use fkooman\VPN\Server\Pools;
use fkooman\VPN\Server\ServerConfig;
use fkooman\Config\Reader;
use fkooman\Config\YamlFile;
use GuzzleHttp\Client;
use fkooman\IO\IO;

$tlsDir = '/etc/openvpn/tls';
$dhFile = sprintf('%s/dh.pem', $tlsDir);
$caFile = sprintf('%s/ca.crt', $tlsDir);
$certFile = sprintf('%s/server.crt', $tlsDir);
$keyFile = sprintf('%s/server.key', $tlsDir);
$taFile = sprintf('%s/ta.key', $tlsDir);

// the size of the DH prime
$dhLength = 3072;

function showHelp(array $argv)
{
    return implode(
        PHP_EOL,
        [
            sprintf('SYNTAX: %s [--reuse] [--generate CN]', $argv[0]),
            '',
            '--reuse        use the existing keys and certificates instead of generating',
            '               again',
            '--generate CN  generate a new certificate/DH params for the server with given',
            '               CN',
            '',
        ]
    );
}

$io = new IO();

try {
    $reUse = false;
    $commonName = null;
    $showHelp = false;

    for ($i = 1; $i < $argc; ++$i) {
        if ('--help' === $argv[$i]) {
            $showHelp = true;
        } elseif ('--reuse' === $argv[$i]) {
            $reUse = true;
        } elseif ('--generate' === $argv[$i]) {
            if (array_key_exists($i + 1, $argv)) {
                $commonName = $argv[$i + 1];
            }
        }
    }

    if ($showHelp) {
        echo showHelp($argv);

        return;
    }

    if (false === $reUse && null === $commonName) {
        echo showHelp($argv);
        throw new Exception('must specificy either CN or --reuse flag');
    }

    $poolsConfig = new Reader(
        new YamlFile(dirname(__DIR__).'/config/pools.yaml')
    );

    $mainConfig = new Reader(
        new YamlFile(dirname(__DIR__).'/config/config.yaml')
    );

    if (!$reUse) {
        // get a new certificate, and also generate a new DH
        $client = new Client(
            [
                'defaults' => [
                    'headers' => [
                        'Authorization' => sprintf('Bearer %s', $mainConfig->v('remoteApi', 'vpn-ca-api', 'token')),
                    ],
                ],
            ]
        );

        $requestUri = $mainConfig->v('remoteApi', 'vpn-ca-api', 'uri');

        $configData = $client->post(
            $requestUri.'/certificate/',
            [
                'headers' => [
                    'Accept' => 'application/json',
                ],
                'body' => [
                    'common_name' => $commonName,
                    'cert_type' => 'server',
                ],
            ]
        )->json();

        $configData = $configData['certificate'];

        $io->writeFile($caFile, $configData['ca'], true);
        $io->writeFile($certFile, $configData['cert'], true);
        $io->writeFile($keyFile, $configData['key'], true);
        $io->writeFile($taFile, $configData['ta'], true);

        // generate the DH params
        $cmd = sprintf('/usr/bin/openssl dhparam -out %s %d >/dev/null 2>/dev/null', $dhFile, $dhLength);
        $output = [];
        $returnValue = -1;
        exec($cmd, $output, $returnValue);
        if (0 !== $returnValue) {
            throw new RuntimeException('unable to generate DH');
        }
    }

    $serverConfigurations = ServerConfig::getConfig(new Pools($poolsConfig->v('pools')));
    //var_export($serverConfigurations);
    foreach ($serverConfigurations as $k => $serverConfig) {
        $configFile = sprintf('/etc/openvpn/server-%s.conf', $k);
        $io->writeFile($configFile, implode(PHP_EOL, $serverConfig), true);
        // set correct file permissions
        chmod($configFile, 0600);
    }

    // fix file and directory permissions
    chmod($tlsDir, 0700);
    chmod($caFile, 0600);
    chmod($certFile, 0600);
    chmod($keyFile, 0600);
    chmod($taFile, 0600);
    chmod($dhFile, 0600);
} catch (Exception $e) {
    echo sprintf('ERROR: %s', $e->getMessage()).PHP_EOL;
    exit(1);
}
