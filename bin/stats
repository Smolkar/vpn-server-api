#!/usr/bin/php
<?php
/**
 * Copyright 2016 FranÃ§ois Kooman <fkooman@tuxed.net>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
require_once dirname(__DIR__).'/vendor/autoload.php';

use fkooman\Config\Reader;
use fkooman\Config\YamlFile;
use fkooman\Json\Json;

try {
    $configReader = new Reader(
        new YamlFile(sprintf('%s/config/config.yaml', dirname(__DIR__)))
    );
    $dataDirs = [];

    foreach ($configReader->v('instanceList') as $instance) {
        $instanceName = $instance['hostName'];
        $dataDirs[] = sprintf('%s/%s', $configReader->v('dataDir'), $instanceName);
    }

    foreach ($dataDirs as $dataDir) {
        $inFile = sprintf('%s/log.json', $dataDir);
        $outFile = sprintf('%s/stats.json', $dataDir);

        $statsData = [];
        $logData = Json::decodeFile($inFile);

        $timeConnection = [];
        $uniqueUsers = [];

        foreach ($logData['entries'] as $entry) {
            $dateOfConnection = date('Y-m-d', $entry['connect_time']);
            if (!array_key_exists($dateOfConnection, $statsData)) {
                $statsData[$dateOfConnection] = [];
            }
            if (!array_key_exists('number_of_connections', $statsData[$dateOfConnection])) {
                $statsData[$dateOfConnection]['number_of_connections'] = 0;
            }
            if (!array_key_exists('traffic', $statsData[$dateOfConnection])) {
                $statsData[$dateOfConnection]['traffic'] = 0;
            }
            if (!array_key_exists('user_list', $statsData[$dateOfConnection])) {
                $statsData[$dateOfConnection]['user_list'] = [];
            }

            ++$statsData[$dateOfConnection]['number_of_connections'];
            if (array_key_exists('traffic', $entry)) {
                // when client is still connected, it won't have a 'traffic' entry
                $statsData[$dateOfConnection]['traffic'] += $entry['traffic'];

                $connectTime = $entry['connect_time'];
                $disconnectTime = $entry['disconnect_time'];

                // add it to table to be able to determine max concurrent connection
                // count
                if (!array_key_exists($connectTime, $timeConnection)) {
                    $timeConnection[$connectTime] = [];
                }
                $timeConnection[$connectTime][] = 'C';

                if (!array_key_exists($disconnectTime, $timeConnection)) {
                    $timeConnection[$disconnectTime] = [];
                }
                $timeConnection[$disconnectTime][] = 'D';
            }
            if (!in_array($entry['user_id'], $statsData[$dateOfConnection]['user_list'])) {
                $statsData[$dateOfConnection]['user_list'][] = $entry['user_id'];
            }

            // global unique user list
            if (!in_array($entry['user_id'], $uniqueUsers)) {
                $uniqueUsers[] = $entry['user_id'];
            }
        }

        ksort($timeConnection);
        $firstEntryTime = intval(key($timeConnection));
        end($timeConnection);
        $lastEntryTime = intval(key($timeConnection));
        reset($timeConnection);

        $maxConcurrentConnections = 0;
        $maxConcurrentConnectionsTime = 0;
        $concurrentConnections = 0;
        foreach ($timeConnection as $unixTime => $eventArray) {
            foreach ($eventArray as $event) {
                if ('C' === $event) {
                    ++$concurrentConnections;
                    if ($concurrentConnections > $maxConcurrentConnections) {
                        $maxConcurrentConnections = $concurrentConnections;
                        $maxConcurrentConnectionsTime = $unixTime;
                    }
                } else {
                    --$concurrentConnections;
                }
            }
        }

        $totalTraffic = 0;
        // convert the user list in unique user count for that day, rework array
        // key and determine total amount of traffic
        foreach ($statsData as $date => $entry) {
            $statsData[$date]['date'] = $date;
            $statsData[$date]['unique_user_count'] = count($entry['user_list']);
            unset($statsData[$date]['user_list']);
            $totalTraffic += $entry['traffic'];
        }

        Json::encodeFile(
            $outFile,
            [
                'days' => array_values($statsData),
                'total_traffic' => $totalTraffic,
                'generated_at' => time(),
                'max_concurrent_connections' => $maxConcurrentConnections,
                'max_concurrent_connections_time' => $maxConcurrentConnectionsTime,
                'first_entry' => $firstEntryTime,
                'last_entry' => $lastEntryTime,
                'unique_users' => count($uniqueUsers),
            ]
        );
    }
} catch (Exception $e) {
    echo $e->getMessage().PHP_EOL;
    exit(1);
}
