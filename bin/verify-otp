#!/usr/bin/php
<?php
/**
 * Copyright 2016 FranÃ§ois Kooman <fkooman@tuxed.net>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
require_once dirname(__DIR__).'/vendor/autoload.php';

use Otp\Otp;
use Base32\Base32;
use fkooman\VPN\Server\InputValidation;
use fkooman\Config\Reader;
use fkooman\Config\YamlFile;
use fkooman\VPN\Server\OtpLog;
use fkooman\VPN\Server\OtpSecret;

openlog(
    basename($argv[0]),
    LOG_PERROR,
    LOG_USER
);

try {
    $envData = [];
    $envKeys = [
        'INSTANCE_ID',
        'POOL_ID',
        'common_name',
        'username',
        'password',
    ];

    // read environment variables
    foreach ($envKeys as $envKey) {
        $envValue = getenv($envKey);
        if (empty($envValue)) {
            throw new RuntimeException(sprintf('environment variable "%s" is not set', $envKey));
        }
        $envData[$envKey] = $envValue;
    }

    // use username field to specify OTP type, for now we only support 'totp'
    $otpType = $envData['username'];
    if ('totp' !== $otpType) {
        throw new RuntimeException(sprintf('invalid OTP type "%s" specified', $otpType));
    }

    $otpKey = $envData['password'];
    // validate the OTP key
    InputValidation::otpKey($otpKey);

    $commonName = $envData['common_name'];
    $userId = substr($commonName, 0, strpos($commonName, '_'));

    $configReader = new Reader(
        new YamlFile(dirname(__DIR__).'/config/config.yaml')
    );

    $dataDir = $configReader->v('dataDir');
    $vpnDataDir = $configReader->v('vpnDataDir');

    $multiInstance = $configReader->v('multiInstance', false, false);
    if ($multiInstance) {
        // multi instance
        $instanceId = $envData['INSTANCE_ID'];
        $dataDir = sprintf('%s/%s', $dataDir, $instanceId);
        $vpnDataDir = sprintf('%s/%s', $vpnDataDir, $instanceId);
        $poolsConfigFile = sprintf('%s/config/%s/pools.yaml', dirname(__DIR__), $instanceId);
    } else {
        // single instance
        $poolsConfigFile = sprintf('%s/config/pools.yaml', dirname(__DIR__));
    }

    // obtain the OTP secret from the CN's configuration
    $poolsConfig = new Reader(new YamlFile($poolsConfigFile));

    $otpSecrets = new OtpSecret($dataDir.'/users/otp_secrets');
    $otpSecret = $otpSecrets->getOtpSecret($userId);
    if (false === $otpSecret) {
        throw new RuntimeException(sprintf('no OTP secret for user "%s" registered', $userId));
    }

    $otp = new Otp();
    if ($otp->checkTotp(Base32::decode($otpSecret), $otpKey)) {
        $db = new PDO(sprintf('sqlite://%s/otp.sqlite', $vpnDataDir));
        $otpLog = new OtpLog($db);
        if (false === $otpLog->record($userId, $otpKey, time())) {
            throw new RuntimeException(sprintf('OTP for user "%s" valid, but was replayed', $userId));
        }
        syslog(LOG_INFO, sprintf('OTP for user "%s" valid', $userId));
        exit(0);
    } else {
        throw new RuntimeException(sprintf('invalid OTP key from user "%s"', $userId));
    }
} catch (Exception $e) {
    syslog(LOG_ERR, $e->getMessage());
    exit(66);
}
